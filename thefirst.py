#–í–∏–∫—É—Å–∏–∫–∏ ...

milk = not True

cereals = True
eggs = False


if (milk and cereals) or eggs:
    if eggs:
        if milk:
            breakfast = "- –æ–º–ª–µ—Ç"
        else:
            breakfast = "- —è–∏—á–Ω–∏—Ü–∞"
    else:
        breakfast = "- —Ö–ª–æ–ø—å—è —Å –º–æ–ª–æ–∫–æ–º"
else:
    if milk:
        breakfast = "- —Å—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞"
    elif cereals:
        breakfast = "–º–æ–∂–Ω–æ –ø–æ–≥—Ä—ã–∑—Ç—å —Å—É—Ö–∏—Ö —Ö–ª–æ–ø—å–µ–≤"
    else:
        breakfast = "–Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç: —Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–π –¥–µ–Ω—å"

print("–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫", breakfast)


flat = [1.22, 4.56, 7.12, 1.22, 4.56, 4.56,7.12]
room_size = 1.22
count = 0

for room in flat:
    if room == room_size:
        count = count + 1
print('–ö–æ–º–Ω–∞—Ç –ø–ª–æ—â–∞–¥—å—é', room_size, '–∫–≤. –º–µ—Ç—Ä–æ–≤:', count)

def rooms_equal(room_size, room_list):
    
# –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±—ä—è–≤–∏–ª–∏
    count = 0

    for room in room_list:
        if room == room_size:
            count = count + 1
    print('–ö–æ–º–Ω–∞—Ç –ø–ª–æ—â–∞–¥—å—é', room_size, '–∫–≤.–º:', count)


# –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∏ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
flat = [
    5.55, 22.19, 7.78, 26.86, 5.55,
    29.84, 22.19, 5.55, 16.85, 4.52
]

hut = [9.2, 3.5, 8.1, 2.3, 9.2, 4.2, 6.9]

rooms_equal(5.55, flat)
# –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ rooms_equal()
# –ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏—Å–∫–æ–º—É—é –ø–ª–æ—â–∞–¥—å - 9.2 –∫–≤.–º –∏ —Å–ø–∏—Å–æ–∫ hut
rooms_equal(9.2, hut)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∫—É–±–∞.
def calc_cube_perimeter(side):
    return side * 12


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –∫—É–±–∞.
def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–ª–∏–Ω—É —Ä–µ–±—Ä–∞ –∫—É–±–∞
def calc_cube(side):
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä
    # –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ—ë —Ä–∞–∑–º–µ—Ä –∫—É–±–∞
    one_cube_perimeter = calc_cube_perimeter(side)
    full_length = one_cube_perimeter * 8

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â—É—é –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–∫–ª–∞
    # –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ –Ω–µ—ë —Ä–∞–∑–º–µ—Ä –∫—É–±–∞
    one_cube_area = calc_cube_area(side)
    full_area = one_cube_area * 8

    print('–î–ª—è 8 –∫—É–±–æ–≤ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–∞–ª–æ–∫ (–º):', full_length, '–∏ —Å—Ç–µ–∫–ª–∞ (–∫–≤.–º):', full_area, '.')

# –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Å—Ç–∞–ª—Å—è –ª–∏—à—å –æ–¥–∏–Ω –≤—ã–∑–æ–≤ "–æ—Å–Ω–æ–≤–Ω–æ–π" —Ñ—É–Ω–∫—Ü–∏–∏,
# –∞ –æ–Ω–∞ —É–∂–µ –≤—ã–∑–æ–≤–µ—Ç –¥–≤–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
calc_cube(5)


def calc_cube_perimeter(side):
    return side * 12


def calc_cube_area(side):
    one_face = side * side
    cube_area = one_face * 6
    return cube_area


def calc_cube(side, number):
    one_cube_perimeter = calc_cube_perimeter(side)
    full_length = one_cube_perimeter * number
    one_cube_area = calc_cube_area(side)
    full_area = one_cube_area * number
    print('–î–ª—è', number, '–∫—É–±–æ–≤ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–∞–ª–æ–∫ (–º):', (int(full_length)), '–∏ —Å—Ç–µ–∫–ª–∞ (–∫–≤.–º):', (int(full_area)))


# –ù–∏–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ calc_cube().
# –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
calc_cube(2, 4)
calc_cube(0.5, 26)
calc_cube(0.61, 6)


def get_together_games(list1, list2):
    new_set1= set(list1)
    new_set2= set(list2)
    return new_set1.intersection(new_set2)
    # –ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π

anfisa_games = [
    'Online-chess',
    '–ì–æ—Ä–æ–¥–∞',
    'DOOM',
    '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'
]
alisa_games = [
    'DOOM',
    'Online-chess',
    '–ì–æ—Ä–æ–¥–∞',
    'GTA',
    'World of tanks'
]
# –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –∏–≥—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
together_games = get_together_games(anfisa_games, alisa_games)
# –ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –∏–≥—Ä –≤ —Ü–∏–∫–ª–µ
for game in together_games:
    print('üëæ', game)


friends_names = ['–ê–Ω—è', '–ö–æ–ª—è', '–õ—ë—à–∞', '–õ–µ–Ω–∞', '–ú–∏—à–∞']
friends_cities = ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ú–æ—Å–∫–≤–∞', '–û–±–Ω–∏–Ω—Å–∫', '–ß–µ–±–æ–∫—Å–∞—Ä—ã']

# –û–±—ä—è–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏,
# –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ —Å—Ö–µ–º–µ "–∏–º—è: –≥–æ—Ä–æ–¥"
friends = {}

# –î–æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–¥ —Å—é–¥–∞
for i in range(0, len(friends_names)):
    friends[friends_names[i]] = friends_cities[i]
    
print('–õ–µ–Ω–∞ –∂–∏–≤–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ: ' + friends['–õ–µ–Ω–∞'])

for name, city in friends.items():
    print(name, '–∂–∏–≤—ë—Ç –≤ –≥–æ—Ä–æ–¥–µ', city)



favorite_songs = {
    '–°–µ—Ä—ë–≥–∞': ['Unforgiven', 'Holiday', 'Highway to hell'],
    '–°–æ–Ω—è': ['Shake it out', 'The Show Must Go On', '–ù–∞—à–µ –ª–µ—Ç–æ'],
    '–î–∏–º–∞': ['–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª', '–ú—É—Ä–∫–∞', '–¢—Ä–µ—Ç—å–µ —Å–µ–Ω—Ç—è–±—Ä—è']
}
# –ù–∏–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω, —Å–∫–æ–ª—å–∫–æ —É –î–∏–º—ã –ª—é–±–∏–º—ã—Ö –ø–µ—Å–µ–Ω
print(len(favorite_songs['–î–∏–º–∞']))
# –ù–∏–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç
# –≤—Å–µ –ª—é–±–∏–º—ã–µ –ø–µ—Å–Ω–∏ –°–æ–Ω–∏.
fav = favorite_songs['–°–æ–Ω—è']
for song in fav:
    print(song)



friends = {
    '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–•–∞–±–∞—Ä–æ–≤—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å'
}

def is_anyone_in(collection, city):
    for friend in friends:
        if collection[friend] == city:
            print('–í –≥–æ—Ä–æ–¥–µ', collection[friend], '–∂–∏–≤—ë—Ç'+ ' ' + friend + '. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–π–¥—É –≤ –≥–æ—Å—Ç–∏!')
        else:
            print('–í –≥–æ—Ä–æ–¥–µ', collection[friend], '—É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥, –Ω–æ –º–Ω–µ —Ç—É–¥–∞ –Ω–µ –Ω–∞–¥–æ.')
    
is_anyone_in(friends, '–•–∞–±–∞—Ä–æ–≤—Å–∫')





mobile_devices = {
    'cucuPhone': 2010,
    'cucuBlet': 2013,
    'cucuClock': 2015,
    'cucuEar': 2018,
    'cuCube': 2015,
}
home_devices = {
    'cucuLot': 2011,
    'cucuBlock': 2010,
    'cucuWall': 2010,
    'cucuMonitor': 2020,
    'cucuLamp': 2015,
    'cucuTable': 2016,
    'cucuTV': 2017,
}
not_supported_devices = {'cucuBlock', 'cucuBlet', 'cucuWall'}

result_catalog = {}

# –î–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –¥–µ–≤–∞–π—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
def get_supported_catalog(dict_devices, device):
    supported_catalog = {}
    if device in dict_devices and device not in not_supported_devices:
        supported_catalog[device] = dict_devices[device]
    return supported_catalog

all_devices = set(mobile_devices).union(set(home_devices))
supported_devices= all_devices.difference(not_supported_devices)

for device in supported_devices:
    supported_mob_dev = get_supported_catalog(mobile_devices, device)
    # –î–æ–±–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å result_catalog
    result_catalog.update(supported_mob_dev)
    supported_home_dev = get_supported_catalog(home_devices, device)
    # –î–æ–±–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å result_catalog
    result_catalog.update(supported_home_dev)

print('–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ–≤–∞–π—Å–æ–≤: ')
print(result_catalog)



DATABASE = {
    '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
}

def process_anfisa(query):
    if query == '–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
        count = len(DATABASE)
        
        return '–£ —Ç–µ–±—è ' + str(count) + ' –¥—Ä—É–∑–µ–π.'
    elif query == '–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        # –ò–∑ —Å–ª–æ–≤–∞—Ä—è DATABASE —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é join();
        # –∏–º–µ–Ω–∞ –¥—Ä—É–∑–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º.
        # –ó–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é friends_string (–≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫).
        friends_string = ', '.join(DATABASE)
        return '–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: ' + friends_string
        

        return '–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: ' + friends_string
    elif query == '–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        unique_cities = set(DATABASE.values())
        # –ò–∑ —Å–µ—Ç–∞ unique_cities —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é join();
        # –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º.
        # –ó–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é cities_string (–≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫).
        cities_string = ', '.join(unique_cities)

        

        return '–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: ' + cities_string
    else:
        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'


print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
print(process_anfisa('–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
print(process_anfisa('–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
print(process_anfisa('–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))

 
def check_query(query):
# –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    elements  = (query.split())
    if elements[0] == '–ê–Ω—Ñ–∏—Å–∞,':
        return '–∑–∞–ø—Ä–æ—Å –∫ –ê–Ω—Ñ–∏—Å–µ'
    else:
        return '–∑–∞–ø—Ä–æ—Å –∫ –∫–æ–º—É-—Ç–æ –µ—â—ë'



# –î–∞–ª—å—à–µ —Å–ª–µ–¥—É–µ—Ç –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é; –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –µ–≥–æ:
queries = [
    '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
    '–ê–Ω–¥—Ä–µ–π, –Ω—É –≥–¥–µ —Ç—ã –±—ã–ª?',
    '–ê–Ω–¥—Ä–µ–π, –Ω—É –æ–±–Ω–∏–º–∏ –º–µ–Ω—è —Å–∫–æ—Ä–µ–π!',
    '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'
]

# –ù–∞–ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
# –ü–µ—Ä–µ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ü–∏–∫–ª–µ
for q in queries:
    # –ö–∞–∂–¥—ã–π –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    # –≤ —Ñ—É–Ω–∫—Ü–∏—é check_query()
    result = check_query(q)
    # –ò –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∞–ø–µ—á–∞—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏, —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å - –≤–µ—Ä–¥–∏–∫—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
    print(q, '-', result)





def calc_stat(listened):  # –û—Ç –∞–Ω–≥–ª. calculate statistics, –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    # –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ calc_stat()
    summ = 0
    for i in range(len(listened)):
        summ += (int(listened[i]))
    print(f'–í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ {len(listened)} –ø–µ—Å–µ–Ω –æ–±—â–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {summ//60} –º–∏–Ω—É—Ç.')
    
calc_stat([189, 148, 210, 144, 174, 158, 163, 189, 227, 198])






DATABASE = {
    '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
}

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, —Å–∫–ª–æ–Ω—è—è —Å–ª–æ–≤–æ "–¥—Ä—É–∑—å—è"
# –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ friends_count
def format_friends_count(friends_count):
    if friends_count == 1:
        return '1 –¥—Ä—É–≥'
    elif 2 <= friends_count <= 4:
        return f'{friends_count} –¥—Ä—É–≥–∞'
    else:
        return f'{friends_count} –¥—Ä—É–∑–µ–π'
  
def process_anfisa(query):
    if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
        count = len(DATABASE)
        # –í—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é format_friends_count() –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤ –Ω–µ—ë count.
        # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ: –≤ –Ω–µ–π –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏–µ,
        # –∫–æ—Ç–æ—Ä–æ–µ –≤–µ—Ä–Ω—ë—Ç —Ñ—É–Ω–∫—Ü–∏—è format_friends_count()
        function = format_friends_count(count)
        return f'–£ —Ç–µ–±—è {function}.'
    elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        friends_string = ', '.join(DATABASE)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
    elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
    else:
        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
    
def process_query(query):
    elements = query.split(', ')
    name = elements[0]
    if name == '–ê–Ω—Ñ–∏—Å–∞':
        query = query.strip('–ê–Ω—Ñ–∏—Å–∞, ')
        return process_anfisa(elements[1])
    else:
        return process_friend(name, elements[1])
    
def process_friend(name, query):
    if name in DATABASE:
        if query == '—Ç—ã –≥–¥–µ?':
            city = DATABASE[name]
            return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
        else: return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
    else: return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'
    
    
print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
print(process_anfisa('–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
print(process_anfisa('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
print(process_anfisa('–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
print(process_anfisa('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?'))
print(process_query('–°–æ–Ω—è, —Ç—ã –≥–¥–µ?'))
print(process_query('–ö–æ–ª—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?'))
print(process_query('–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?'))




import datetime as dt

UTC_OFFSET = {
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
    '–ú–æ—Å–∫–≤–∞': 3,
    '–°–∞–º–∞—Ä–∞': 4,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
    '–ö–∞–∑–∞–Ω—å': 3,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
    '–û–º—Å–∫': 6,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
    '–£—Ñ–∞': 5,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
    '–ü–µ—Ä–º—å': 5,
    '–í–æ—Ä–æ–Ω–µ–∂': 3,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2
}

def what_time(city):
    time = dt.datetime.utcnow()
    time_2 = dt.timedelta(hours= UTC_OFFSET[city])
    time_3 = time+time_2
    return time_3
    # –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏;
    # –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ city



#–ü–æ–ª–Ω–∞—è –ê–Ω—Ñ–∏—Å–∞:
import datetime as dt

DATABASE = {
    '–°–µ—Ä–≥–µ–π': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–ê–ª–µ–∫—Å–µ–π': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ê—Ä—Ç—ë–º': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–ü–µ—Ç—è': '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞'
}

UTC_OFFSET = {
    '–ú–æ—Å–∫–≤–∞': 3,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
    '–ö–∞–∑–∞–Ω—å': 3,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
    '–û–º—Å–∫': 6,
    '–°–∞–º–∞—Ä–∞': 4,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
    '–£—Ñ–∞': 5,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
    '–í–æ—Ä–æ–Ω–µ–∂': 3,
    '–ü–µ—Ä–º—å': 5,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2,
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 10
}


def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 –¥—Ä—É–≥'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} –¥—Ä—É–≥–∞'
    else:
        return f'{count_friends} –¥—Ä—É–∑–µ–π'

def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime("%H:%M")
    return f_time


def process_anfisa(query):
    if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
        count = len(DATABASE)
        return f'–£ —Ç–µ–±—è {format_count_friends(count)}.'
    elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        friends_string = ', '.join(DATABASE)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
    elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
    else:
        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'


def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == '—Ç—ã –≥–¥–µ?':
            return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
        elif query == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?':
            if city in UTC_OFFSET: return f'–¢–∞–º —Å–µ–π—á–∞—Å {what_time(city)}'
            else:
                return f'<–Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ {DATABASE [name]}>'
        else:
            return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
    else:
        return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'


def process_query(query):
    elements = query.split(', ')
    if elements[0] == '–ê–Ω—Ñ–∏—Å–∞':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])


def runner():
    queries = [
        '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?',
        '–ö–æ–ª—è, —Ç—ã –≥–¥–µ?',
        '–°–æ–Ω—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?',
        '–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?',
        '–ê–ª–µ–∫—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê—Ä—Ç—ë–º, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê–Ω—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ü–µ—Ç—è, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?'
    ]
    for query in queries:
        print(query, '-', process_query(query))

runner()





import urllib.parse

strings = [
    '–ß—Ç–æ —Ç–∞–∫–æ–µ backend',
    '–ü—Ä–∏–≤–µ—Ç!',
    ' ',        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª.
    'leti≈°tƒõ',  # –ê—ç—Ä–æ–ø–æ—Ä—Ç –ø–æ-—á–µ—à—Å–∫–∏.
    'M√ºnchen',  # –ö—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ –ë–∞–≤–∞—Ä–∏–∏.
    'Champs-√âlys√©es',  # –ï–ª–∏—Å–µ–π—Å–∫–∏–µ –ø–æ–ª—è.
    'Êù±‰∫¨',     # –ê —ç—Ç–æ –¢–æ–∫–∏–æ.
]

for s in strings:
    encoded = urllib.parse.quote(s)          # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    decoded = urllib.parse.unquote(encoded)  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç—Ä–æ–∫–∞.
    print(decoded, '-', encoded)



  
  
import requests
url = 'https://wttr.in/'
weather_parameters = {
    'u':'', #'0':'',
    'T':'',
    'M':'',
}
request_headers ={
    'Accept-Language': 'ru'
}

response = requests.get(url, params=weather_parameters, headers=request_headers)
print(response.text)

#         \    /              \   /
#          .--.            __ /"".-.
#      -- (    ) --           \_(   ).
#          `--'               /(___(__)
#         /    \
  
  
  
  
# –≤–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
def calc_share(apples, friends):
    # –æ—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç–∫—É—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É int
    friends_number = int(friends.split()[0])
    return apples/friends_number

# –µ—Å—Ç—å 17 —è–±–ª–æ–∫
apples = 17

# –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥—É
# –≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é calc_share() –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—à–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö,
# —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º –¥—Ä—É–∑–µ–π
for friends in ['7 –¥—Ä—É–∑–µ–π', '2 –¥—Ä—É–≥–∞', '0 –¥—Ä—É–∑–µ–π', '–æ–¥–∏–Ω –≤—Ä–∞–≥']:
        try:
                print('–ö–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ', calc_share(apples, friends), '—è–±–ª–æ–∫–∞')
        except ZeroDivisionError:
                print('–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.')
        except ValueError:
                print(f'–ò–∑ —Å—Ç—Ä–æ–∫–∏ "{friends}" –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å —á–∏—Å–ª–æ.')


#FINAL EXERCISE(of Yandex.Praktikum):
import datetime as dt
import requests
DATABASE = {
    '–°–µ—Ä–≥–µ–π': '–û–º—Å–∫',
    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
    '–ê–ª–µ–∫—Å–µ–π': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
    '–ê—Ä—Ç—ë–º': '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫',
    '–ü–µ—Ç—è': '–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞'
}
UTC_OFFSET = {
    '–ú–æ—Å–∫–≤–∞': 3,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 3,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 7,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 5,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 3,
    '–ö–∞–∑–∞–Ω—å': 3,
    '–ß–µ–ª—è–±–∏–Ω—Å–∫': 5,
    '–û–º—Å–∫': 6,
    '–°–∞–º–∞—Ä–∞': 4,
    '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': 3,
    '–£—Ñ–∞': 5,
    '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 7,
    '–í–æ—Ä–æ–Ω–µ–∂': 3,
    '–ü–µ—Ä–º—å': 5,
    '–í–æ–ª–≥–æ–≥—Ä–∞–¥': 3,
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': 3,
    '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 2,
    '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 10
}

def format_count_friends(count_friends):
    if count_friends == 1:
        return '1 –¥—Ä—É–≥'
    elif 2 <= count_friends <= 4:
        return f'{count_friends} –¥—Ä—É–≥–∞'
    else:
        return f'{count_friends} –¥—Ä—É–∑–µ–π'

def what_time(city):
    offset = UTC_OFFSET[city]
    city_time = dt.datetime.utcnow() + dt.timedelta(hours=offset)
    f_time = city_time.strftime("%H:%M")
    return f_time

def what_weather(city):
    url = f'http://wttr.in/{city}'
    weather_parameters = {
        'format': 2,
        'M': ''
    }
    try:
        response = requests.get(url, params=weather_parameters)
    except requests.ConnectionError:
        return '<—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞>'
    if response.status_code == 200:
        return response.text
    else:
        return '<–æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã>'

def process_anfisa(query):
    if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
        count = len(DATABASE)
        return f'–£ —Ç–µ–±—è {format_count_friends(count)}.'
    elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        friends_string = ', '.join(DATABASE)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
    elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
        unique_cities = set(DATABASE.values())
        cities_string = ', '.join(unique_cities)
        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
    else:
        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'

def process_friend(name, query):
    if name in DATABASE:
        city = DATABASE[name]
        if query == '—Ç—ã –≥–¥–µ?':
            return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
        elif query == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?':
            if city not in UTC_OFFSET:
                return f'<–Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ {city}>'
            time = what_time(city)
            return f'–¢–∞–º —Å–µ–π—á–∞—Å {time}'
        elif query == '–∫–∞–∫ –ø–æ–≥–æ–¥–∞?':
            weather = what_weather(city)
            return weather
        else:
            return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
    else:
        return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'

def process_query(query):
    elements = query.split(', ')
    if elements[0] == '–ê–Ω—Ñ–∏—Å–∞':
        return process_anfisa(elements[1])
    else:
        return process_friend(elements[0], elements[1])

def runner():
    queries = [
        '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?',
        '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?',
        '–ö–æ–ª—è, —Ç—ã –≥–¥–µ?',
        '–°–æ–Ω—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?',
        '–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?',
        '–ê–ª–µ–∫—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê—Ä—Ç—ë–º, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ê–Ω—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ü–µ—Ç—è, –∫–æ—Ç–æ—Ä—ã–π —á–∞—Å?',
        '–ö–æ–ª—è, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?',
        '–°–æ–Ω—è, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?',
        '–ê–Ω—Ç–æ–Ω, –∫–∞–∫ –ø–æ–≥–æ–¥–∞?'
    ]
    for query in queries:
        print(query, '-', process_query(query))
runner()


#–ù–µ –≤—Å–µ –¥–æ–±–∏—Ä–∞—é—Ç—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞ –∏ –≤–∏–¥—è—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:
#–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–ª–∏ –∫—É—Ä—Å!
#–í—ã —Å–æ–∑–¥–∞–ª–∏ –ê–Ω—Ñ–∏—Å—É, –∏, –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º, –æ–Ω–∞ –∑–∞–∂–∏–ª–∞ —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é. –ü—É—Ç—å –æ—Ç "Hello, world" –¥–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –±—ã–ª –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –≤—ã –ø—Ä–æ—à–ª–∏ –µ–≥–æ. –û—Å—Ç–∞—ë—Ç—Å—è –ª–∏—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ, –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤–≤–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞.
#[–ó–¥–µ—Å—å —Å–∞–ª—é—Ç, —Ñ–∞–Ω—Ñ–∞—Ä—ã –∏ –∫–∏–ª–æ–≥—Ä–∞–º–º –º–æ—Ä–æ–∂–µ–Ω–æ–≥–æ]



#                                    --- –Ø.–ü—Ä–∞–∫—Ç–∏–∫—É–º(–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å) - –í—Å—ë! ---
#                                    –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: 53 –¥–Ω—è (28.07 - 18.09.2023)
                            



#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <unistd.h>
#             k;double sin()
#         ,cos();main(){float A=
#       0,B=0,i,j,z[1760];char b[
#     1760];printf("\x1b[2J");for(;;
#  ){memset(b,32,1760);memset(z,0,7040)
#  ;for(j=0;6.28>j;j+=0.07)for(i=0;6.28
# >i;i+=0.02){float c=sin(i),d=cos(j),e=
# sin(A),f=sin(j),g=cos(A),h=d+2,D=1/(c*
# h*e+f*g+5),l=cos      (i),m=cos(B),n=
#sin(B),t=c*h*g-f*        e;int x=40+30*D*
#3(l*h*m-t*n),y=            12+15*D*(l*h*n
#+t*m),o=x+80*y,          N=8*((f*e-c*d*g
# )*m-c*d*e-f*g-l        *d*n);if(22>y&&
# y>0&&x>0&&80>x&&D>z[o]){z[o]=D;;;b[o]=
# ".,-~:;=!*#$@"[N>0?N:0];}}/*#****!!-*/
#  printf("\x1b[H");for(k=0;1761>k;k++)
#   putchar(k%80?b[k]:10);A+=0.04;B+=
#     0.02;}}/*****####*******!!=;:~
#       ~::==!!!**********!!!==::-
#         .,~~;;;========;;;:~-.
#             ..,--------,*/
#
#–æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ https://www.onlinegdb.com/online_c_compiler 
